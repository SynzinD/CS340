<!--OSU340 Spring 2025 Group 47
    Megan Mooers and Synzin Darkpaw-->

<!-- 
    Citation for the <script> block below
    Date: 5/19/25
    Adapted from AI:
    Source URL: https://gemini.google.com/app
    Code here was adapted from the code in individuals.hbs, which was partially generated from Gemini
    Using the prompts described there. 
    ADDITIONALLY:
    Gemini was asked to quickly sketch out placeholder functions to demonstrate implementation of "form" aspect.
    This code will be replaced in the final version!! 
-->

<h2>View and Add Custom Seating Objects</h2>
<table>
    <thead>
        <tr>
            <th>Seating Object ID</th>
            <th>Event Name</th>
            <th>Object Name</th>
            <th>Seating Capacity</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody id="seatingObjectsTableBody">
        {{#each seatingobjects}}
        <tr data-id="{{this.seating_objectID}}">
            <td>{{this.seating_objectID}}</td>
            <td data-field="eventName" data-event-id="{{this.eventID}}">{{this.eventName}}</td>
            <td data-field="objectName">{{this.objectName}}</td>
            <td data-field="objectCapacity">{{this.objectCapacity}}</td>
            <td class="actions-cell">
                <button class="edit-btn" onclick="editRow(this, {{this.seating_objectID}})">Edit</button>
                <button class="save-btn" style="display:none;" onclick="saveRow(this, {{this.seating_objectID}})">Save</button>
                <button class="cancel-btn" style="display:none;" onclick="cancelEdit(this, {{this.seating_objectID}})">Cancel</button>
            </td>
            <td>
                <button onclick="deleteSeatingObject({{this.seating_objectID}})">Delete</button>
            </td>
        </tr>
        {{/each}}
    </tbody>
</table>
<h3>Add New Seating Object</h3>
<form action="/seating-objects" method="POST">
        <label for="eventID">Event:</label><br>
    <select id="eventID" name="eventID">
        <option value="">Select an Event</option>
        {{#each events}}
        <option value="{{this.eventID}}">{{this.eventName}}</option>
        {{/each}}
    </select><br><br>

        <label for="objectName">Object Name:</label><br>
        <input type="text" id="objectName" name="objectName" required><br><br>

        <label for="objectCapacity">Object Capacity:</label><br>
        <input type="number" id="objectCapacity" name="objectCapacity"><br><br>

        <input type="submit" value="Add Seating Object">
</form>


<script>
    let originalRowContent = {}; 

    function editRow(button, seatingObjectID) {
        const row = button.closest('tr');
        originalRowContent[seatingObjectID] = row.innerHTML; 

        // Get cells by their data-field attribute
        const eventNameCell = row.querySelector('[data-field="eventName"]');
        const objectNameCell = row.querySelector('[data-field="objectName"]');
        const objectCapacityCell = row.querySelector('[data-field="objectCapacity"]');

        // Retrieve eventID
        const currentEventID = eventNameCell.dataset.eventId || '';

        // For placeholder: use number inputs for eventID and quantity
        // In a full implementation, you'd use dropdowns for Event ID
        eventNameCell.innerHTML = `<input type="number" value="${currentEventID}" name="eventID">`;
        objectNameCell.innerHTML = `<input type="text" value="${objectNameCell.textContent}" name="objectName">`;
        objectCapacityCell.innerHTML = `<input type="number" value="${objectCapacityCell.textContent}" name="objectCapacity">`;

        // Toggle button visibility
        row.querySelector('.edit-btn').style.display = 'none';
        row.querySelector('.save-btn').style.display = 'inline-block';
        row.querySelector('.cancel-btn').style.display = 'inline-block';
        row.querySelector('td:last-child button').style.display = 'none'; 
    }

    // Placeholder Save 
    async function saveRow(button, seatingObjectID) {
        const row = button.closest('tr');
        // Get values from the input fields
        const eventIDInput = row.querySelector('[name="eventID"]');
        const objectNameInput = row.querySelector('[name="objectName"]');
        const objectCapacityInput = row.querySelector('[name="objectCapacity"]');

        // Placeholder alert
        alert(`SAVE functionality not yet implemented for Seating Objects!\nAttempted to save:\nSeating Object ID: ${seatingObjectID}\nEvent ID: ${eventIDInput.value}\nObject Name: ${objectNameInput.value}\nObject Capacity: ${objectCapacityInput.value}`);


        if (originalRowContent[seatingObjectID]) {
            row.innerHTML = originalRowContent[seatingObjectID];
            delete originalRowContent[seatingObjectID];
        } else {
            window.location.reload();
        }
    }

    function cancelEdit(button, seatingObjectID) {
        const row = button.closest('tr');
        if (originalRowContent[seatingObjectID]) {
            row.innerHTML = originalRowContent[seatingObjectID];
            delete originalRowContent[seatingObjectID];
        } else {
            window.location.reload(); 
        }
    }

    // --- Placeholder Delete 
    function deleteSeatingObject(seatingObjectID) {
        if (confirm(`Are you sure you want to delete Seating Object ID: ${seatingObjectID}?`)) {
            alert(`DELETE functionality not yet implemented for Seating Objects!\nAttempted to delete: Seating Object ID ${seatingObjectID}`);
        }
    }
</script>